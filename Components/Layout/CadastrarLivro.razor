@using Biblioteca.DataBase.Services
@using Biblioteca.Models
@using Microsoft.AspNetCore.Components

@inject IBookService BookService

<EditForm Model="@Livro" class="custom-form" FormName="book-form" OnValidSubmit="HandleRegister">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="row mt-3">
    <div class="col form-group">
        <label for="titulo">Título</label>
        <InputText id="titulo" class="form-control" @bind-Value="Livro.Titulo" />
    <div class="col form-group">
        <label for="autor">Autor</label>
        <InputText id="autor" class="form-control" @bind-Value="Livro.Autor.Nome" />
    </div>
    </div>
    </div>
    <div class="col form-group">
        <label for="publishedDate">Data de Publicação</label>
        <InputDate id="publishedDate" class="form-control" @bind-Value="Livro.PublishedDate" />
    </div>
    <div class="row mt-3">
        <div class="col form-group">
            <label for="categoria">Categoria</label>
            <InputText id="categoria" class="form-control" @bind-Value="Livro.Categoria.Nome" />
        </div>
    </div>

    <button type="submit" class="btn btn-primary mt-4">Cadastrar</button>
</EditForm>

<div class="toast-container position-fixed bottom-0 end-0 p-3">
    <div class="toast @(Toast ? "show" : "")" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="toast-header">
            @if (IsSuccessfull)
            {
                <span class='bi bi-check-circle-fill me-2 text-success'></span>
            }
            else
            {
                <span class='bi bi-x-circle-fill me-2 text-danger'> </span>
            }

            <strong class="me-auto">Biblioteca</strong>
            <button type="button" class="btn-close" @onclick="HideToast" aria-label="Close"></button>
        </div>
        <div class="toast-body">
            @(IsSuccessfull ? "Livro Cadastrado com sucesso!" : "Erro ao cadastrar Livro!")
        </div>
    </div>
</div>


@code {
    private Livro? Livro { get; set; } = new Livro {
            Autor = new Autor(),
            Categoria = new Categoria()
        };

    public bool Toast { get; private set; }
    public bool IsSuccessfull { get; private set; }

    private async Task HandleRegister()
    {
        if (Livro == null || Livro.Autor == null || Livro.Categoria == null)
        {
            IsSuccessfull = false;
            ShowToast();
            return;
        }

        var success = await BookService.AddBook(Livro, Livro.Autor, Livro.Categoria);
        IsSuccessfull = success;

        ShowToast();
    }


    private void ShowToast()
    {
        Toast = true;
        StateHasChanged();
    }

    private void HideToast()
    {
        Toast = false;
        StateHasChanged();
    }

}
